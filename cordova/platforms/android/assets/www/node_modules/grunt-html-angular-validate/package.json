{
  "name": "grunt-html-angular-validate",
  "description": "An HTML validator aimed at AngularJS projects.",
  "version": "0.3.0",
  "homepage": "https://github.com/nikestep/grunt-html-angular-validate",
  "author": {
    "name": "Nik Estep",
    "email": "nik.estep@gmail.com",
    "url": "http://nikestep.me"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nikestep/grunt-html-angular-validate.git"
  },
  "bugs": {
    "url": "https://github.com/nikestep/grunt-html-angular-validate/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nikestep/grunt-html-angular-validate/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "w3cjs": "~0.1.22",
    "colors": "~0.6.0",
    "temporary": "~0.0.8"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-html-angular-validate\n\n> An HTML validator aimed at AngularJS projects.\n\nWhile there are other Grunt plugins that will validate HTML files, there are lacking a couple important features:\n\n * Support for AngularJS attributes and tags (both from AngularJS and custom created)\n * Support for templated/fragmented HTML files\n\nThis plugin looks to solve these problems and provide the value that comes with having HTML validation in the build chain.\n\nPlease note that this plugin works with the [w3cjs](https://github.com/thomasdavis/w3cjs) node plugin and will send files to be validated against the W3C online validator tool. W3C asks that you be considerate of their free validator service and they will block your IP if your traffic is deemed \"excessive\" by their servers. Such a block will automatically clear once the traffic subsides, but if your project is large enough, you may need to run your own local W3C validator server. A guide for how to do this can be found [here](https://github.com/tlvince/w3c-validator-guide). See the options below for pointing this plugin to a local validator service.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-html-angular-validate --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-html-angular-validate');\n```\n\n## The \"htmlangular\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `htmlangular` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  htmlangular: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.angular\nType: `Boolean`\nDefault value: `true`\n\nTurns on ignoring of validation errors that are caused by AngularJS.\n\n#### options.customtags\nType: `Array`\nDefault value: `[]`\n\nList all of the custom tags you have created through directives and other means here. The validator will ignore warnings about these tags.\n\n#### options.customattrs\nType: `Array`\nDefault value: `[]`\n\nList all of the custom attributes you have created through directives and other means here. The validator will ignore warnings about\nthese attributes.\n\n#### options.wrapping\nType: `Object`\nDefault value: `{}`\n\nNot all Angular templates start with tags that can be wrapped directly within the `<body>` tag. For templates like this, they first need\nto be wrapped before the regular full-document wrapping that the plugin performs. As an example, a template for a row in a table might\nlook like this:\n\n    <tr>\n        <td>{name}</td>\n        <td>{birthdate}</td>\n        <td>{address}</td>\n    </tr>\n\nThe entry into the `options.wrapping` plugin option would look like this:\n\n    wrapping: {\n        'tr': '<table>{0}</table>'\n    }\n\nThe content of the template will be placed within the `{0}` and then the whole block will be wrapped like other templates. Note that the\nname of the tag should not be wrapped with `<` and `>`.\n\n#### options.relaxerror\nType: `Array`\nDefault value: `[]`\n\nList the error strings you want explicitly ignored by the validator.\n\n### options.tmplext\nType: `String`\nDefault value: `tmpl.html`\n\nThe extension of HTML files that are templated or otherwise not complete and valid HTML files (i.e. do not start and end with `<html>`). The validator will wrap these files as complete HTML pages for validation.\n\n###options.doctype\nType: `String`\nDefault value: `HTML5`\n\nThe doctype to use when validating HTML files. Set to `false` to have the validator auto-detect the doctype.\n\n###options.charset\nType: `String`\nDefault value: `utf-8`\n\nThe charset to use when validating HTML files. Set to `false` to have the validator auto-detect the charset.\n\n###options.reportpath\nType: `String`\nDefault value: `html-angular-validate-report.json`\n\nThe path to write a JSON report of validation and linting output to after completion. Set to `null` to not create this file.\n\n###options.w3clocal\nType: `String`\nDefault value: `null`\n\nUse this when running a local instance of the W3C validator service (e.g. `http://localhost:8080`). Do not use in conjunction with\n`options.w3cproxy`.\n\n###options.w3cproxy\nType: `String`\nDefault value: `null`\n\nThe proxy to the W3C validator service. Use this as an alternative when running a local instance of the W3C validator service\n(e.g. `http://localhost:8080`). Do not use in conjunction with `optinos.w3clocal`.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  htmlangular: {\n    options: {\n        tmplext: 'html.tmpl',\n        customtags: [\n            'top-nav',\n            'left-bar',\n            'right-bar',\n            'client-footer'\n        ],\n        customattrs: [\n            'fixed-width-box',\n            'video-box'\n        ],\n        relaxerror: [\n            'The frameborder attribute on the iframe element is obsolete. Use CSS instead.'\n        ]\n        reportpath: 'target/html-angular-validate-report.json'\n    },\n    files: {\n      src: ['src/www/**/*.html', 'src/www/**/*.html.tmpl'],\n    },\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n * 2014-04-26  v0.3.0  Fixed #4, Fixed #5, created unit tests\n * 2014-02-04  v0.2.3  Fixed #2, fixed silly push mistake, add ui-* to default angular tags/attrs\n * 2014-02-04  v0.2.2  Fixed #1 and added W3C proxy option\n * 2014-01-27  v0.2.1  Renamed project\n * 2014-01-12  v0.2.0  Increased recognition of AngularJS caused validation erros\n * 2014-01-11  v0.1.0  Initial release",
  "readmeFilename": "README.md",
  "_id": "grunt-html-angular-validate@0.3.0",
  "dist": {
    "shasum": "998bc8f84f7d40aed7787b322fe72d1f3649142d"
  },
  "_from": "grunt-html-angular-validate@",
  "_resolved": "https://registry.npmjs.org/grunt-html-angular-validate/-/grunt-html-angular-validate-0.3.0.tgz"
}
